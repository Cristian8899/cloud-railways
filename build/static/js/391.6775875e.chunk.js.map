{"version":3,"file":"static/js/391.6775875e.chunk.js","mappings":"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","sources":["components/UI/Alert.js","webpack://react-complete-guide/./src/components/auth/AuthForm.module.css?80cd","components/auth/AuthForm.js","pages/AuthPage.js"],"sourcesContent":["import React from 'react';\r\nimport './Alert.css';\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        <div className='alert'>\r\n            <span>{props.message}</span>\r\n            <button onClick={props.onClose} className='alert-button'>Close</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"auth\":\"AuthForm_auth__bgAsk\",\"control\":\"AuthForm_control__DvGQO\",\"actions\":\"AuthForm_actions__aAj0Y\",\"toggle\":\"AuthForm_toggle__JtTkn\"};","import { useState, useRef , useContext} from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\nimport classes from \"./AuthForm.module.css\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport Alert from '../UI/Alert';\r\n\r\nconst AuthForm = () => {\r\n  const history = useHistory();\r\n  const emailInputRef = useRef();\r\n  const passwordInputRef = useRef();\r\n\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const closeAlertHandler = () => {\r\n    setAlertMessage('');\r\n}\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin((prevState) => !prevState);\r\n\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredPassword = passwordInputRef.current.value;\r\n\r\n\r\n    if (!enteredEmail || !enteredEmail.includes('@')) {\r\n      setAlertMessage('Invalid email!');\r\n      return;\r\n  }\r\n\r\n  if (!enteredPassword || enteredPassword.length < 6) {\r\n      setAlertMessage('Password should be at least 6 characters long!');\r\n      return;\r\n  }\r\n\r\n    setIsLoading(true);\r\n    let url;\r\n    if (isLogin) {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDb7xoSVKkLIuCpUlM4UCqoe-d56S02yY4\";\r\n    } else {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDb7xoSVKkLIuCpUlM4UCqoe-d56S02yY4\";\r\n    }\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: enteredEmail,\r\n        password: enteredPassword,\r\n        returnSecureToken: true,\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setIsLoading(false);\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          return res.json().then((data) => {\r\n            let errorMessage = \"Authentication failed\";\r\n            // if (data && data.error && data.error.message) {\r\n            //   errorMessage = data.error.message;\r\n            // }\r\n\r\n            throw new Error(errorMessage);\r\n          });\r\n        }\r\n      })\r\n      .then((data) => {\r\n        const expirationTime = new Date((new Date().getTime() + (+data.expiresIn * 1000)))\r\n        authCtx.login(data.idToken,expirationTime.toISOString(),enteredEmail);\r\n        \r\n      //  console.log(authCtx.email);\r\n        history.replace('/new-ticket');\r\n      })\r\n      .catch((err) => {\r\n        alert(err.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section className={classes.auth}>\r\n       {alertMessage && <Alert message={alertMessage} onClose={closeAlertHandler} />}\r\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n      <form onSubmit={submitHandler}>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"email\">Your Email</label>\r\n          <input type=\"email\" id=\"email\" required ref={emailInputRef} />\r\n        </div>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"password\">Your Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            required\r\n            ref={passwordInputRef}\r\n          />\r\n        </div>\r\n        <div className={classes.actions}>\r\n          {!isLoading && (\r\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\r\n          )}\r\n          {isLoading && <LoadingSpinner></LoadingSpinner>}\r\n          <button\r\n            type=\"button\"\r\n            className={classes.toggle}\r\n            onClick={switchAuthModeHandler}\r\n          >\r\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from '../components/auth/AuthForm';\r\n\r\nconst AuthPage = () => {\r\n  return <AuthForm />;\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["props","_jsxs","className","children","_jsx","message","onClick","onClose","history","useHistory","emailInputRef","useRef","passwordInputRef","authCtx","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","isLogin","setIsLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","alertMessage","setAlertMessage","classes","Alert","onSubmit","event","preventDefault","url","enteredEmail","current","value","enteredPassword","includes","length","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","Error","expirationTime","Date","getTime","expiresIn","login","idToken","toISOString","replace","catch","err","alert","htmlFor","type","id","required","ref","LoadingSpinner","prevState","AuthForm"],"sourceRoot":""}